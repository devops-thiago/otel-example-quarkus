name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev

    strategy:
      matrix:
        java-version: [21]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow clone for SonarCloud

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true
        path-replace-backslashes: false
        list-suites: all
        list-tests: all
        max-annotations: 10
        fail-on-empty: true
        only-summary: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate code coverage report
      run: mvn jacoco:report

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

    - name: Check coverage thresholds
      run: mvn jacoco:check
      continue-on-error: true

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=devops-thiago_otel-example-quarkus \
          -Dsonar.organization=devops-thiago \
          -Dsonar.host.url=https://sonarcloud.io
      if: ${{ env.SONAR_TOKEN != '' }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: target/site/jacoco/

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts
        path: target/*.jar

  docker:
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/otel-quarkus-crud:latest
          ${{ secrets.DOCKER_USERNAME }}/otel-quarkus-crud:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update deployment status
      run: echo "Docker image built and pushed successfully"

  integration-test:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: docker compose up -d

    - name: Wait for services to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8080/q/health; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8080/api/users
        curl -f http://localhost:8080/q/health
        curl -f http://localhost:8080/q/metrics

        # Test creating a user
        curl -X POST http://localhost:8080/api/users \
          -H "Content-Type: application/json" \
          -d '{"name": "Test User", "email": "test@example.com", "bio": "Integration test"}' \
          -f

    - name: Check observability stack
      run: |
        # Verify Grafana is running
        curl -f http://localhost:3000

        # Verify Alloy is running
        curl -f http://localhost:12345

    - name: Stop services
      if: always()
      run: docker compose down